== Pass 1: Generate Density Function ==

Use the GPU's pixel shader (PS) unit to evaluate the complex density function at every cell corner within the block and store the results in a large 3D texture. The blocks are generated one at a time, so one 3D texture can be shared universally. However, because the texture stores the density values at the cell corners, the texture is 33x33x33 in size, rather than 32x32x32 (the number of cells in the block). On the GPU, a 3D texture is implemented as an array of 2D textures. To run a PS that writes to every pixel in a slice, we draw two triangles that, together, cover the render portal. To cover all the slices, we use instancing. In DirectX, this means nothing more than calling ID3D10Device::DrawInstanced() (rather than the ordinary Draw() function) with the numInstances parameter set to 33. This procedure effectively draws the triangle pair 33 times.

The vertex shader (VS) knows which instance is being drawn by specifying an input attribute using the SV_InstanceID semantic; these values will range from 0 to 32, depending on which instance is being drawn. The VS can then pass this value on to the geometry shader, which writes it out to an attribute with the SV_RenderTarget - ArrayIndex semantic. This semantic determines to which slice of the 3D texture (the render target array) the triangle actually gets rasterized. In this way, the PS is run on every pixel in the entire 3D texture.

Vertex Shader:
Receives instance index and passes it on to Geometry Shader

Geometry Shader:
Writes instance index out to an attribute that specifies which instance the density value should be rasterized to

Fragment Shader:
Outputs a density value at each pixel on every instance (slice) based on magic (see GPU Gems 3, section 1.3.3)


== Pass 2: Generate Vertices (Method 1) ==

The first (and simplest) method for building a block of terrain is the most straight forward, and requires only two render passes. Visit each (nonmargin) voxel in the density volume. The geometry shader generates and streams out up to 15 vertices (5 triangles) per voxel. Improve performance by implementing method 2 and/or 3 if time permits.

Vertex Shader:
???

Geometry Shader:
Generate triangle vertices based on lookup table

Fragment Shader:
???
